# -*- coding: utf-8 -*-
"""AgePrediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mA28jzglFb2bChOTASF3dcIxhcUyaDft
"""

!pip install tensorflow keras

# ✅ Imports
import tensorflow as tf
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Lambda, Dense, Dropout, GlobalAveragePooling2D, BatchNormalization
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.applications.mobilenet_v2 import preprocess_input
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.preprocessing import image

import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint

# ✅ Define input shape
input_shape = (224, 224, 3)

# ✅ Input layer
inputs = Input(shape=input_shape)

# ✅ Preprocess input for MobileNetV2
x = Lambda(preprocess_input)(inputs)

# ✅ Load pretrained MobileNetV2 (without top layer)
base_model = MobileNetV2(include_top=False, weights='imagenet', input_shape=input_shape)
base_model.trainable = False  # Freeze weights

# ✅ Feature extraction
x = base_model(inputs, training=False)  # Pass 'inputs' directly to base_model

x = GlobalAveragePooling2D()(x)  # Global pooling to reduce the spatial dimensions
x = Dense(512, activation='relu')(x)
x = BatchNormalization()(x)
x = Dropout(0.5)(x)
x = Dense(256, activation='relu')(x)
x = Dropout(0.3)(x)

# ✅ Output 1: Age prediction (regression)
age_output = Dense(1, name='age_output')(x)

# ✅ Output 2: Feature prediction (multi-label classification)
# Let's assume: 5 features → [beard, wrinkles, glasses, makeup, bald]
feature_output = Dense(5, activation='sigmoid', name='feature_output')(x)

# ✅ Final model
model = Model(inputs=inputs, outputs=[age_output, feature_output])

# ✅ Compile model
model.compile(
    optimizer=Adam(learning_rate=0.001),
    loss={
        'age_output': 'mse',
        'feature_output': 'binary_crossentropy'
    },
    metrics={
        'age_output': 'mae',
        'feature_output': 'accuracy'
    }
)

# ✅ Show model summary
model.summary()

# ✅ Data Augmentation (if using real data)
datagen = ImageDataGenerator(
    rotation_range=15,
    width_shift_range=0.1,
    height_shift_range=0.1,
    horizontal_flip=True
)

# ✅ Dummy data for testing (100 samples of 224x224 RGB images)
X_dummy = np.random.rand(100, 224, 224, 3).astype(np.float32)

# ✅ Dummy age labels (regression targets)
y_age_dummy = np.random.randint(18, 60, size=(100, 1)).astype(np.float32)

# ✅ Callbacks for EarlyStopping and ModelCheckpoint
callbacks = [
    EarlyStopping(patience=5, restore_best_weights=True),
    ModelCheckpoint('best_model.h5', save_best_only=True)
]

# ✅ Train the model (just to test, with dummy data)
model.fit(
    X_dummy,
    {'age_output': y_age_dummy, 'feature_output': y_feat_dummy},
    epochs=2,
    batch_size=8,
    callbacks=callbacks
)

from google.colab import files  # Only for Colab
from tensorflow.keras.preprocessing import image
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.applications.mobilenet_v2 import preprocess_input

# ✅ Upload an image (For Google Colab)
uploaded = files.upload()

# ✅ Get the uploaded image path
img_path = list(uploaded.keys())[0]

# ✅ Load the image
img = image.load_img(img_path, target_size=(224, 224))

# ✅ Convert image to array and preprocess it
img_array = image.img_to_array(img)
img_array = np.expand_dims(img_array, axis=0)  # Add batch dimension
img_array = preprocess_input(img_array)  # Preprocess the image for MobileNetV2

# ✅ Predict using the model
age_pred, features_pred = model.predict(img_array)

# ✅ Display results
print(f"Predicted Age: {age_pred[0][0]:.1f}")
feature_names = ['beard', 'wrinkles', 'glasses', 'makeup', 'bald']
for i, name in enumerate(feature_names):
    print(f"  {name}: {'Yes' if features_pred[0][i] > 0.5 else 'No'}")

# ✅ Show the image with the predicted age
plt.imshow(img)
plt.axis('off')
plt.title(f"Predicted Age: {age_pred[0][0]:.1f}")
plt.show()